// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// State is an autogenerated mock type for the State type
type State struct {
	mock.Mock
}

// Changed provides a mock function with given fields:
func (_m *State) Changed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Present provides a mock function with given fields:
func (_m *State) Present() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *State) Reset() {
	_m.Called()
}

// Set provides a mock function with given fields: present
func (_m *State) Set(present bool) {
	_m.Called(present)
}

type mockConstructorTestingTNewState interface {
	mock.TestingT
	Cleanup(func())
}

// NewState creates a new instance of State. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewState(t mockConstructorTestingTNewState) *State {
	mock := &State{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
