// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ARPing is an autogenerated mock type for the ARPing type
type ARPing struct {
	mock.Mock
}

// Count provides a mock function with given fields: count
func (_m *ARPing) Count(count uint) {
	_m.Called(count)
}

// Ping provides a mock function with given fields: ctx, ifi, hw, ip
func (_m *ARPing) Ping(ctx context.Context, ifi string, hw string, ip string) (bool, error) {
	ret := _m.Called(ctx, ifi, hw, ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, ifi, hw, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, ifi, hw, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewARPing interface {
	mock.TestingT
	Cleanup(func())
}

// NewARPing creates a new instance of ARPing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewARPing(t mockConstructorTestingTNewARPing) *ARPing {
	mock := &ARPing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
