// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// Net is an autogenerated mock type for the Net type
type Net struct {
	mock.Mock
}

// InterfaceByName provides a mock function with given fields: name
func (_m *Net) InterfaceByName(name string) (*net.Interface, error) {
	ret := _m.Called(name)

	var r0 *net.Interface
	if rf, ok := ret.Get(0).(func(string) *net.Interface); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interfaces provides a mock function with given fields:
func (_m *Net) Interfaces() ([]net.Interface, error) {
	ret := _m.Called()

	var r0 []net.Interface
	if rf, ok := ret.Get(0).(func() []net.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNet interface {
	mock.TestingT
	Cleanup(func())
}

// NewNet creates a new instance of Net. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNet(t mockConstructorTestingTNewNet) *Net {
	mock := &Net{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
